//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MasterMindApi.Models
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Threading;

    public partial class MastermindEntities : DbContext
    {
        public MastermindEntities()
            : base("name=MastermindEntities")
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        public virtual DbSet<Games> Games { get; set; }
        public virtual DbSet<Stages> Stages { get; set; }
        public virtual DbSet<Games_Stages> Games_Stages { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        /**********************************Games**********************************/

        internal Games CreateGame(Users user)
        {
            var game = new Games();

            var LGameSequence = new List<int>();

            List<int> p = new int[] { 1, 2, 3, 4, 5, 6, 7, 8 }.ToList();
            Random r = new Random();
            while (LGameSequence.Count < 8)
            {
                int n = r.Next(0, p.Count - 1);
                LGameSequence.Add(p[n]);
                Thread.Sleep(n + 10);
            }

            game.GameSequence = string.Concat(LGameSequence);
            game.Player_Games_StagesId1 = user.UserId;

            if ((bool)!user.IsWaitChallenger)
            {
                game.Player_Games_StagesId2 = 0;
                game.Player_Name_2 = "";
            }

            using (var context = new MastermindEntities())
            {
                user = context.Users.Where(x => x.UserId == user.UserId).FirstOrDefault();
                game.Player_Name_1 = user.UserName;
            }

            this.Games.Add(game);
            this.SaveChanges();

            return game;
        }

        public Games FindGame(int PlayerId, int GameId)
        {
            var game = new Games();

            using (var context = new MastermindEntities())
            {
                if (GameId == 0)
                {
                    game = context.Games.Where(x => x.Player_Games_StagesId2 == null).FirstOrDefault();
                    if (game != null)
                    {
                        game.Player_Games_StagesId2 = PlayerId;

                        Users user = context.Users.Where(x => x.UserId == PlayerId).FirstOrDefault();
                        game.Player_Name_2 = user.UserName;

                        context.SaveChanges();
                    }
                }
                else
                {
                    game = context.Games.Where(x => x.GameId == GameId).FirstOrDefault();
                }
            }

            return game;
        }

        /**********************************Stages*********************************/

        public Stages CheckSequence(Stages stage)
        {
            int ok = 0;
            int close = 0;

            var LPlayerSequence = new List<int>();
            foreach (char c in stage.PlayerSequence.ToArray())
            {
                LPlayerSequence.Add(Convert.ToInt16(c.ToString()));
            }

            Games game;
            var LGameSequence = new List<int>();
            using (var context = new MastermindEntities())
            {
                game = context.Games.Where(x => x.GameId == stage.GameId).FirstOrDefault();
                foreach (char c in game.GameSequence.ToArray())
                {
                    LGameSequence.Add(Convert.ToInt16(c.ToString()));
                }
            }

            for (int i = 0; i < LGameSequence.Count; i++)
            {
                if (LPlayerSequence.FindAll(x => x == i).Count > 0)
                    if (LGameSequence.FindAll(x => x == i).Count > LPlayerSequence.FindAll(x => x == i).Count)
                        close += LPlayerSequence.FindAll(x => x == i).Count;
                    else
                        close += LGameSequence.FindAll(x => x == i).Count;

                if (LGameSequence[i] == LPlayerSequence[i])
                    ok++;
            }

            close -= ok;

            stage.StageCheck = ok.ToString() + close.ToString();
            if (ok == LGameSequence.Count)
            {
                stage.IsMatch = 1;
            }
            else
            {
                stage.IsMatch = 0;
            }

            /**/
            using (var context = new MastermindEntities())
            {
                int Player_Games_StagesId1 = 0;
                int Player_Games_StagesId2 = 0;

                Player_Games_StagesId1 = (int)game.Player_Games_StagesId1;
                Player_Games_StagesId2 = (int)game.Player_Games_StagesId2;

                if (Player_Games_StagesId2 == 0)
                {
                    stage.StageCheck2 = "80";
                    this.Stages.Add(stage);
                    this.SaveChanges();
                }
                else
                {
                    if (stage.UserId != Player_Games_StagesId1)
                    {
                        Player_Games_StagesId2 = Player_Games_StagesId1;
                        Player_Games_StagesId1 = (int)stage.UserId;
                    }

                    stage.StageCheck2 = "";

                    var player_2_result = "";

                    if (context.Stages.Where(x => x.UserId == Player_Games_StagesId1 && x.GameId == stage.GameId).Count() <
                       context.Stages.Where(x => x.UserId == Player_Games_StagesId2 && x.GameId == stage.GameId).Count())
                    {
                        var a = context.Stages.Where(x => x.UserId == Player_Games_StagesId2 && x.GameId == stage.GameId).ToList();

                        if (a.Count>0)
                        {
                            int p = a.Max(y => y.StageId);
                            Stages player2 = context.Stages.Where(x => x.StageId == p).FirstOrDefault();                           
                            player2.StageCheck2 = ok.ToString() + close.ToString(); //context.Stages.Where(x => x.StageId == p).FirstOrDefault().StageCheck;
                            
                            context.SaveChanges();

                            stage.StageCheck2 = player2.StageCheck;
                        }
                    }

                    this.Stages.Add(stage);
                    this.SaveChanges();

                }
            }
            /**/

            Games_Stages game_stage = new Games_Stages();

            game_stage.GameId = stage.GameId;
            game_stage.StageId = stage.StageId;

            this.Games_Stages.Add(game_stage);
            this.SaveChanges();

            return stage;
        }
        /**********************************Games_Stages***************************/
    }
}
